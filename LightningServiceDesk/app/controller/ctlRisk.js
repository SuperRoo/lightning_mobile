/*
 * File: app/controller/ctlRisk.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Mob2.controller.ctlRisk', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            carousel: '#frmCarousel',
            panRiskTask: '#RiskTask',
            taskListForm: '#RiskList',
            riskList: '#RiskList',
            navMain: '#navMain',
            taskDelete: '#RiskTask #cmdTaskDelete',
            conDeleteButton: '#RiskConDetail [itemId=cmdConDelete]',
            conSaveButton: '#RiskConDetail [itemId=cmdConSave]',
            conDetail: '#RiskConDetail',
            conListForm: '#RiskConList',
            raToolsList: '#raToolsList',
            riskSignature: '#RiskSignature',
            appointments: '#AppointmentContainer',
            frmCarousel: '#frmCarousel',
            riskRating: '#RiskRating',
            frmDetails: '#frmCarousel #frmDetails',
            ctlTaskName: '#RiskTask #txtName',
            ctlTaskRiskRating: '#RiskTask #txtRiskRating',
            ctlTaskComment: '#RiskTask #txtComments',
            navRisk: '#navRisk'
        },

        control: {
            "button#cmdTaskAdd": {
                tap: 'onCmdTaskAddTap'
            },
            "#RiskTask #cmdTaskDelete": {
                tap: 'onCmdTaskDeleteTap'
            },
            "#RiskTask #cmdTaskSave": {
                tap: 'onCmdTaskSaveTap'
            },
            "button#cmdListNext": {
                tap: 'onCmdTaskNextTap'
            },
            "#RiskTask #cmdTaskCancel": {
                tap: 'onCmdTaskCancelTap'
            },
            "button#cmdTaskBack": {
                tap: 'onCmdTaskBackTap'
            },
            "button#cmdConAdd": {
                tap: 'onCmdConAddTap'
            },
            "button#cmdConNext": {
                tap: 'onCmdConNextTap'
            },
            "button#cmdConSave": {
                tap: 'onCmdConSaveTap'
            },
            "button#cmdConDelete": {
                tap: 'onCmdConDeleteTap'
            },
            "button#cmdFinish": {
                tap: 'onCmdFinishTap'
            },
            "list#lstTasks": {
                itemsingletap: 'onLstTasksItemSingletap'
            },
            "#RiskConList list#lstContractors": {
                itemsingletap: 'onConListItemSingletap'
            },
            "list#lstHazard": {
                itemsingletap: 'onLstHazardItemSingletap'
            },
            "list#lstRisks": {
                itemsingletap: 'onLstRisksItemSingletap'
            },
            "list#lstMeasures": {
                itemsingletap: 'onLstMeasuresItemSingletap'
            },
            "list#raToolsList": {
                itemsingletap: 'onRaToolsListItemSingletap'
            },
            "selectfield#ddlHierarchy": {
                action: 'onDdlHierarchyAction'
            },
            "button#cmdRANext": {
                tap: 'onCmdRANextTap'
            },
            "textfield#txtRiskRating": {
                tap: 'onTxtRiskRatingTap'
            }
        }
    },

    onCmdTaskAddTap: function(button, e, eOpts) {
        console.log('adding new task');
        var me = this;
        if (typeof me.getPanRiskTask() !=='undefined'){me.getPanRiskTask().destroy();}
        var task = Ext.create('Mob2.view.RiskTask',{title:'New Task'});
        me.loadTaskLists('','','',task);
        me.getNavRisk().push(task); 
        me.getTaskDelete().hide();
    },

    onCmdTaskDeleteTap: function(button, e, eOpts) {
        var me = this;
        var abc = Ext.Msg.confirm("Lightning", "Are you sure you want to delete this record?", function(e)
        {
            if(e == 'yes'){       
                var vals = me.getPanRiskTask().getValues();
                var record = Mob2.RiskTasks.getById(vals.id);
                var store = Ext.getStore('RisTasksLocal');
                //0=unchanged 1=insert 2=update
                if(record.get('mode') === 1){
                    //inserted so remove as not on server
                    store.removeAt(Mob2.RiskTasks.indexOfId(record.get('id')));
                }else{
                    //updated or original so mark as deleted for removal by server
                    record.set('mode',3);
                } 
                record.set('mode',3);
                store.sync();
                var lst = me.getTaskListForm().child('#lstTasks');
                lst.setStore(store);
                lst.refresh();        
                me.getNavRisk().pop();
            }
        });

    },

    onCmdTaskSaveTap: function(button, e, eOpts) {
        var me = this;
        var msg = '';
        var taskForm = me.getPanRiskTask();
        var fields = taskForm.getItems();
        var vals = taskForm.getValues();
        //validation
        //var model = Ext.ModelMgr.create(taskForm.getValues(), 'Mob2.model.RiskTasks');
        //var errors = model.validate();
        //var data='';
        //if(!errors.isValid()){
        //errors.each(function (item, index, length) {
        // Each item in the errors collection is an instance of the Ext.data.Error class.
        //data = data + '|'+item.getField()+' - '+ item.getMessage() +'|';
        //});
        //Ext.Msg.alert("Validation Failed", data);
        //}else{
        //0=unchanged 1=insert 2=update 3=delete
        var msg = '';
        var store = Ext.getStore('RiskTasksLocal')
        vals.appointmentID = Mob2.appointmentID;
        vals.hazards = me.listSelection(taskForm.down('#fldHazards').down('#lstHazard'));
        vals.risks = me.listSelection(taskForm.down('#fldRisks').down('#lstRisks'));
        vals.measures = me.listSelection(taskForm.down('#fldMeasures').down('#lstMeasures')); 
        if(vals.name === ''){
            msg = 'you need to have a task name';
        }else if (vals.measures === '' && vals.comments === ''){
            msg = 'you need to have at least 1 measure or a comment';
        }else if(vals.hierarchy === ''){
            msg = 'you need to have a hierarchy';
        }else if (vals.riskRating === ''){
            msg = 'you need to have a risk rating';
        }else if (vals.risks === ''){
            msg = 'you need to have at least 1 risk';
        }else if (vals.hazards === ''){
            msg = 'you need to have at least 1 hazard';
        }else{
            if(me.getNavRisk().getNavigationBar().getTitle() === 'Edit Task'){
                //edit
                if (vals.mode != 1){
                    vals.mode = 2;
                }
                store.removeAt(store.indexOfId(vals.recordID));
                store.add(vals);
            }else{
                //add
                vals.mode = 1;
                vals.recordID = me.getApplication().getController('ctlCommon').getMaxID(store);
                store.add(vals);
            }
            store.sync();
            store.filter();
            //update dirty
            Mob2.app.getApplication().getController('Details').setDirty(Mob2.appointmentID,'RiskTask',false);
            //update list
            var lst = me.getTaskListForm().child('#lstTasks');

            me.showRiskStore();
            lst.setStore(Mob2.RiskTasks);
            lst.refresh();
            me.getNavRisk().pop();
        }
        if(msg !== ''){
            Ext.Msg.alert('Lightning',msg + '<br/>cannot continue');
        }
    },

    onCmdTaskNextTap: function(button, e, eOpts) {
        var me = this;
        if(Ext.getStore('RiskTasksLocal').getCount() === 0 ){
            Ext.Msg.alert('Lightning','you need at least 1 task<br/>cannot continue');
        }else{
            if(me.getConListForm()){me.getConListForm().destroy();}
            var viewPanel = Ext.create('Mob2.view.RiskConList');
            var lst = viewPanel.down('#lstContractors');  
            lst.setRecord(Ext.getStore('ContractorsLocal'));
            me.getNavRisk().push(viewPanel); 
        }

    },

    onCmdTaskCancelTap: function(button, e, eOpts) {
        var me = this;
        me.getNavRisk().pop();
    },

    onCmdTaskBackTap: function(button, e, eOpts) {
        var me = this;
        Ext.Viewport.setActiveItem(me.getNavMain());
        Ext.Viewport.remove(me.getNavRisk(),false);
        Mob2.loading = true;
        me.getCarousel().setActiveItem(0);
        Mob2.loading = false;
        me.getNavMain().show();
    },

    onCmdConAddTap: function(button, e, eOpts) {
        console.log('cmdConAddTap');
        var me = this;
        if(me.getConDetail()){ me.getConDetail().destroy()}
        var view = Ext.create('Mob2.view.RiskConDetail');
        view.setTitle('New Contractor');
        view.down('#txtSignature').setValue(Mob2.sigPlaceholder);
        me.getConDeleteButton().hide();
        me.getNavRisk().push(view); 
        //me.getNavMain().getNavigationBar().setTitle();

    },

    onCmdConNextTap: function(button, e, eOpts) {
        var me = this;
        var ctlDetail = Mob2.app.getApplication().getController('Details')
        if(!me.getRiskSignature()){
            Ext.create('Mob2.view.RiskSignature');
        }
        var record = ctlDetail.getAppointmentRecord(Mob2.appointmentID);
        var sig = me.getRiskSignature().down('#txtSignature')
        if (record.get('riskSignature') === ''){
            sig.setValue(Mob2.sigPlaceholder);
        }else{    
            sig.setValue(record.get('riskSignature'));
            sig.setIsSigValid(true);
        }
        me.getNavRisk().push(me.getRiskSignature());   

    },

    onCmdConSaveTap: function(button, e, eOpts) {
        var me = this;
        var detailForm = me.getConDetail();
        var msg = ''
        var fields = detailForm.getItems();
        var vals = detailForm.getValues();
        var sigValid = me.getConDetail().down('#txtSignature').getIsSigValid();
        //validation
        if(vals.name === ''){
            msg = 'you need a contractor name';
        }else if (!sigValid){
            msg = 'you need a contractor signature';    
        }else{
            var store = Ext.getStore('ContractorsLocal');  
            vals.riskSignature = me.getConDetail().down('#txtSignature').getValue();
            //0=unchanged 1=insert 2=update
            vals.appointmentID = Mob2.appointmentID;
            if(me.getNavRisk().getNavigationBar().getTitle() === 'Edit Contractor'){
                console.log('edit Contractor');
                //edit
                if (vals.mode != 1){vals.mode = 2;}
                store.removeAt(store.indexOfId(vals.recordID));
                store.add(vals);
            }else{
                //add
                vals.mode = 1;
                vals.recordID = me.getApplication().getController('ctlCommon').getMaxID(store);
                store.add(vals);
            }
            store.sync();
            store.filter();
            //update dirty
            Mob2.app.getApplication().getController('Details').setDirty(Mob2.appointmentID,'Contractor',false);
            //update list
            var lst = me.getConListForm().down('#lstContractors');
            lst.setStore(store);
            lst.refresh();
            me.getNavRisk().pop();
        }
        if (msg !== ''){
            Ext.Msg.alert('Lightning',msg + '<br>cannot continue');
        }
    },

    onCmdConDeleteTap: function(button, e, eOpts) {
        var me = this;
        var abc = Ext.Msg.confirm("Lightning", "Are you sure you want to delete this contractor?", function(e)
        {
            if(e == 'yes'){ 
                var store = Ext.getStore('ContractorsLocal');
                var vals = me.getConDetail().getValues();
                var record = store.getById(vals.id);
                //0=unchanged 1=insert 2=update
                if(record.get('mode') === 1){
                    //inserted so remove as not on server
                    store.removeAt(store.indexOfId(record.get('id')));
                }else{
                    //updated or original so mark as deleted for removal by server
                    record.set('mode',3);
                } 
                record.set('mode',3);
                store.sync();
                var lst = me.getConListForm().down('#lstContractors');
                lst.setStore(store);
                lst.refresh();        
                me.getNavRisk().pop();
            }
        });
        me.showRiskStore();

    },

    onCmdFinishTap: function(button, e, eOpts) {
        console.log('made it to finish');
        Ext.Viewport.setMasked(true);
        var me = this;
        var ctlDetails = Mob2.app.getApplication().getController('Details');
        var finish = me.getRiskSignature().down('#txtSignature');
        if(finish.getIsSigValid()){
            var rec = ctlDetails.getAppointmentRecord(Mob2.appointmentID);
            rec.set('riskSignature', finish.getValue());
            rec.set('isRiskDone',true);
            Ext.getStore('AppointmentsLocal').sync();
            Mob2.app.getApplication().getController('Details').setDirty(Mob2.appointmentID,'Activity',false);
            me.saveRisk();    
            Ext.Viewport.remove(me.getNavRisk(),false);
            Mob2.loading = true;
            me.getCarousel().setActiveItem(0);
            Mob2.loading = false;
            me.getNavMain().show();
            if(me.getRiskSignature()){me.getRiskSignature().destroy();}
            if(me.getNavRisk()){me.getNavRisk().destroy();}
            Ext.Viewport.setMasked(false);
        }else{
            Ext.Viewport.setMasked(false);
            Ext.Msg.alert('Lightning', 'you need to sign the risk statement', Ext.emptyFn);
        }
    },

    onLstTasksItemSingletap: function(dataview, index, target, record, e, eOpts) {
        console.log('made it to task listtap')
        var me = this;
        if(record){
            // Ext.Viewport.setMasked(true); 
            if (typeof me.getPanRiskTask() !=='undefined'){me.getPanRiskTask().destroy();}
            var task = Ext.create('Mob2.view.RiskTask',{title:'Edit Task'});
            task.setRecord(record);
            me.loadTaskLists(record.get('hazards'),record.get('risks'),record.get('measures'),task);
            me.geNavRisk().push(task);   
            Ext.Viewport.setMasked(false); 
        }

    },

    onConListItemSingletap: function(dataview, index, target, record, e, eOpts) {
        console.log('made it to contractor listtap')
        var me = this;
        if(record){
            Ext.Viewport.setMasked(true); 
            if(me.getConDetail()){me.getConDetail().destroy}
            var view = Ext.create('Mob2.view.RiskConDetail');
            view.setTitle('Edit Contractor');   
            view.setRecord(record);
            if(record.get('riskSignature') === ''){
                view.down('#txtSignature').setValue(Mob2.sigPlaceholder);
            }else{
                view.down('#txtSignature').setValue(record.get('riskSignature'));
            }
            me.geNavRisk().push(view); 
            Ext.Viewport.setMasked(false); 
        }

    },

    onLstHazardItemSingletap: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        if(me.getCtlTaskName().getValue() ===''){
            Ext.Msg.alert('Lightning','you need a task name<br/>cannot contiune');
        }else{    
            me.listItemCheck(dataview,record);
        }
    },

    onLstRisksItemSingletap: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        if (me.listHasRecords(1)){    
            me.listItemCheck(dataview,record);
        }else{
            Ext.Msg.alert('Lightning','you need to have at least 1 hazard<br/>cannot continue');
        }
    },

    onLstMeasuresItemSingletap: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        if(me.getCtlTaskRiskRating().getValue() === ''){
            Ext.Msg.alert('Lightning','you need to have a risk rating\ncannot continue');
        }else{
            me.listItemCheck(dataview,record);
        }

    },

    onRaToolsListItemSingletap: function(dataview, index, target, record, e, eOpts) {
        Mob2.toolDirty = true;
        var chk = document.getElementsByName('chkRATools' + record.get('id'))[0];
        chk.checked = !chk.checked;


    },

    onDdlHierarchyAction: function(textfield, e, eOpts) {
        if(me.getCtlTxtComment().getValue() === '' && !me.lisHasRecords(3)){
            Ext.Msg.alert('Lightning','you need to have at least 1 measure or a comment<br/>cannot continue');
            return false;
        }
    },

    onCmdRANextTap: function(button, e, eOpts) {
        var me = this;


        if (Mob2.toolDirty){
            var lst = me.getRaToolsList();
            var mainStore = Ext.getStore('RAMainLocal');
            var lstString='';
            var chk;
            mainStore.each(function(record){
                chk = document.getElementsByName('chkRATools' + record.get('id'))[0]
                if(chk){
                    if(chk.checked){
                        if(lstString.length === 0){
                            lstString = record.get('id');
                        }else{
                            lstString += ',' +record.get('id');
                        }
                    }
                }
            });
            var toolStore = Ext.getStore('RAToolLocal');
            var ar = null;
            toolStore.each(function(record){
                if(record.get('aptList').toString() !== ''){
                    ar = record.get('aptList').toString().split(',');
                    Ext.Array.each(ar, function(rec) {
                        if (Mob2.appointmentID.toString() === rec){
                            if(record.get('mode') !== 1){record.set('mode',2);}
                            record.set('list',lstString);
                            return false;
                        }
                    })
                    if(!Mob2.toolDirty){return false};
                }
            });    
            if(Mob2.toolDirty){
                var newRecord={aptList: Mob2.appointmentID,list: lstString, mode:1};
                toolStore.add(newRecord);
                toolStore.sync();
                Mob2.toolDirty = false;
                Mob2.app.getApplication().getController('Details').setDirty(Mob2.appointmentID,'RATools',false);
            }
        }
        me.geNavRisk().push(me.getTaskListForm());   


    },

    onTxtRiskRatingTap: function(textfield) {
        var me = this;
        if (me.listHasRecords(2)){    
            if (!me.getRiskRating()){
                Ext.create('Mob2.view.RiskRating');
            }
            me.getNavRisk().push(me.getRiskRating());
        }else{
            Ext.Msg.alert('Lightning','you need to have at least 1 risk<br/>cannot continue');
        }

    },

    loadTaskLists: function(hazards, risks, measures, form) {
        var me = this;
        //create stores
        var hazardStore = Ext.create('Ext.data.Store', {
        model: 'Mob2.model.RiskMain'}
        ); 
        var riskStore = Ext.create('Ext.data.Store', {
        model: 'Mob2.model.RiskMain'}
        ); 
        var measureStore = Ext.create('Ext.data.Store', {
        model: 'Mob2.model.RiskMain'}
        ); 
        Ext.getStore('RiskMainLocal').each(function(record){
            record.set('Checked','hidden');
        });
        Ext.getStore('RiskMainLocal').each(function(record){
            if(record.get('TypeID') === 1){
                hazardStore.add(record);
            } else if (record.get('TypeID') === 2){
                riskStore.add(record);
            }else{
                measureStore.add(record);
            }
        });
        hazardStore.sync();
        riskStore.sync();
        measureStore.sync();
        if( hazards !== ''){ 
            me.setListChecked(hazards,hazardStore);
        }
        if(risks !== ''){
            me.setListChecked(risks,riskStore);
        }
        if(measures !== ''){
            me.setListChecked(measures,measureStore);
        }
        var lst = form.down('#fldHazards').down('#lstHazard');
        var mult = 45;
        lst.setHeight(hazardStore.getCount() * mult);
        lst.setStore(hazardStore);
        lst.refresh();
        lst = form.down('#fldRisks').down('#lstRisks');
        lst.setHeight(riskStore.getCount() * mult);
        lst.setStore(riskStore);
        lst.refresh();
        lst = form.down('#fldMeasures').down('#lstMeasures');
        lst.setHeight(measureStore.getCount() * mult);
        lst.setStore(measureStore);
        lst.refresh();

    },

    loadRAList: function() {
        var me = this;
        var list = '';
        var retString='';
        //zero main
        var main = Ext.getStore('RAMainLocal');
        main.each(function(record){
            record.set('checked','');
        });
        retString = me.getApplication().getController('ctlCommon').getRAList(Mob2.appointmentID);
        if(retString && retString !== ''){
            arr = retString.split(',');
            for (var i=0;i<arr.length;i++){
                record = main.getById(arr[i]);
                record.set('checked','checked');
            }
        }    
        main.sync();
        me.getRaToolsList().setStore(main);
        me.getRaToolsList().refresh();
    },

    listHasRecords: function(typeID) {
        //gets count of type in risk main local...return false if zero
        var store = Ext.getStore('RiskMainLocal');
        var all = store.getData().all;
        var record = null;
        var counter = 0;
        for(r=0;r<all.length;r++){
            record = all[r];
            if (parseInt(record.get('TypeID')) === typeID && record.get('Checked') === 'visible'){
                counter += 1;
            }
        }
        if(counter === 0){
            return false;
        }else{
            return true;
        }
    },

    listItemCheck: function(dataview, record) {
        if (record.get('Checked') ==='hidden'){
            record.set('Checked','visible');
        }else{
            record.set('Checked','hidden');
        }
        dataview.refresh();

    },

    listSelection: function(list) {
        var store = list.getStore();
        var retVal = '';
        store.each(function(record){
            if(record.get('Checked') ==='visible'){
                retVal += record.get('recordID') + ',';

            }
        });
        console.log('string: ' + retVal);
        return retVal.substring(0, retVal.length -1);
    },

    setListChecked: function(strList, store) {
        var arr;
        var record;
        store.each(function(item){
            item.set('Checked','hidden');
        });
        if(typeof strList !== 'undefined'){
            arr = strList.split(',');
            for (var i=0;i<arr.length;i++){
                record = store.findRecord('recordID',arr[i]);
                record.set('Checked','visible');
            }
        }
    },

    showRiskStore: function() {
        var me = this
        var store = Ext.getStore('RiskTasksLocal');
        store.each(function(record){
            console.log('Name: ' + record.get('name') + ' AppointmentID: ' + record.get('appointmentID') + ' Mode: ' + record.get('mode'));
        });
        console.log('show all count' + store.getAllCount());
    },

    saveRATools: function(appointmentID) {
        var me = this;
        var ctlDetail = Mob2.app.getApplication().getController('Details')
        var strTools = Ext.getStore('RAToolLocal');
        var RiskAll,aptRecord = null;
        aptRecord = ctlDetail.getAppointmentRecord(appointmentID);
        var data = {};
        var itemList = [];
        data.URI = Mob2.userID;
        data.appointmentID = Mob2.appointmentID;
        data.batch = aptRecord.get('riskRABatch');
        var appsAll = Ext.getStore('AppointmentsLocal').getData().all;
        for(r=0;r<appsAll.length;r++){
            record = appsAll[r];
            if (typeof data.aptList === 'undefined'){
                data.aptList =  record.get('id');
            }else{
                data.aptList = data.aptList + ',' + record.get('id');
            }   
        }
        RiskAll = strTools.getData().all;
        for(r=0;r<RiskAll.length;r++){
            record = RiskAll[r];
            bFound = false;
            if (record.get('mode') !== 0){
                Ext.Array.each(record.get('aptList'),function(apt){
                    if (apt === appointmentID){
                        bFound = true;
                        return false;
                    }
                })
                if(bFound){
                    itemList.push({list:record.get('list')}); 
                }
            }       
        }
        data.data = itemList;
        Ext.Ajax.request({
            url: Mob2.apiURL + 'riskRASave',
            disableCaching: false,    
            jsonData: JSON.stringify(data), 
            method:'POST',
            success: function(result){
                if(result.statusText === 'OK'){  
                    var vals = Ext.JSON.decode(result.responseText,true);
                    if(vals && vals.status === 'success'){ 
                        var itemList = [];
                        strTools.clearFilter();
                        strTools.removeAll();
                        strTools.sync();
                        Ext.Array.each(vals.data,function(rec){
                            obj = Ext.JSON.decode(rec,true);
                            if (obj.length !== 0){
                                var recTools = null;
                                for(var y = 0; y < obj.length;y++){
                                    recTools =  Ext.create('Mob2.model.RATools');
                                    recTools.set('aptList',obj[y].aptList);
                                    recTools.set('list',obj[y].list);                                          
                                    recTools.set('mode',obj[y].mode);
                                    strTools.add(recTools);
                                }
                            }               
                            var batch = aptRecord.get('riskRABatch');
                            aptRecord.set('riskRABatch',batch+1);
                            ctlDetail.setDirty(appointmentID,'RiskTasks',true);
                        })  
                        strTools.sync();
                        Ext.getStore('AppointmentsLocal').sync();

                    }
                }
            },
            error: function(response, opts){  
                console.log(TAG + 'saveRiskTask:server-side failure with status code ' + response.status);
                console.log(TAG + 'responseText: ' + response.responseText);
            }
        });
    },

    saveRiskTasks: function(appointmentID) {
        var me = this;
        var ctlDetail = Mob2.app.getApplication().getController('Details')
        var strRisk = Ext.getStore('RiskTasksLocal');
        var RiskAll,aptRecord = null;
        aptRecord = ctlDetail.getAppointmentRecord(appointmentID);
        var data = {};
        var itemList = [];
        data.appointmentID = appointmentID;
        data.URI = Mob2.userID;
        data.batch = aptRecord.get('riskTasksBatch');
        RiskAll = strRisk.getData().all;
        for(r=0;r<RiskAll.length;r++){
            record = RiskAll[r];
            if(record.get('appointmentID') === appointmentID && record.get('mode') !== 0){
                itemList.push({id:record.get('id'),name:record.get('name'),hazards:record.get('hazards'),risks:record.get('risks'),riskRating:record.get('riskRating'),measures:record.get('measures'),hierarchy:record.get('hierarchy'),residualRating:record.get('residualRating'),comments:record.get('comments'),mode:record.get('mode'),batch:aptRecord.get('riskTasksBatch')}); 
            }
        }
        data.data = itemList;
        Ext.Ajax.request({
            url: Mob2.apiURL + 'riskTaskSave',
            disableCaching: false,    
            jsonData: JSON.stringify(data), 
            method:'POST',
            success: function(result){
                if(result.statusText === 'OK'){  
                    var vals = Ext.JSON.decode(result.responseText,true);
                    if(vals && vals.status === 'success'){ 
                        var itemList = [];
                        var q = [];
                        for(r=0;r< RiskAll.length;r++){
                            record = RiskAll[r];
                            if(record.get('appointmentID') === appointmentID){
                                q.push(record);
                            }
                        }
                        if (q.length !== 0){
                            strRisk.remove(q);
                        }
                        strRisk.sync();
                        Ext.Array.each(vals.data,function(rec){
                            obj = Ext.JSON.decode(rec,true);
                            if (obj.length !== 0){
                                for(var y = 0; y < obj.length;y++){
                                    recRiskTask =  Ext.create('Mob2.model.RiskTasks');
                                    recRiskTask.set('recordID',obj[y].id);
                                    recRiskTask.set('appointmentID',obj[y].appointmentID);
                                    recRiskTask.set('hazards',obj[y].hazards);
                                    recRiskTask.set('name',obj[y].name);
                                    recRiskTask.set('risks',obj[y].risks);
                                    recRiskTask.set('riskRating',obj[y].riskRating);
                                    recRiskTask.set('measures',obj[y].measures);
                                    recRiskTask.set('hierarchy',obj[y].hierarchy);
                                    recRiskTask.set('residualRating',obj[y].residualRating);
                                    recRiskTask.set('comments',obj[y].comments);                            
                                    recRiskTask.set('mode',obj[y].mode);
                                    strRisk.add(recRiskTask);
                                }
                            }               
                            var batch = aptRecord.get('inventoryBatch');
                            aptRecord.set('riskTasksBatch',batch+1);
                            Mob2.app.getApplication().getController('Details').setDirty(appointmentID,'RiskTasks',true);
                        })  
                        strRisk.sync();
                        Ext.getStore('AppointmentsLocal').sync();

                    }
                }
            },
            error: function(response, opts){  
                console.log(TAG + 'saveRiskTask:server-side failure with status code ' + response.status);
                console.log(TAG + 'responseText: ' + response.responseText);
            }
        });
    },

    saveRisk: function() {
        var me = this;
        var ctlDetails = Mob2.app.getApplication().getController('Details');
        if(navigator.onLine){
            var dirtyStore = Ext.getStore('DirtyLocal');
            dirtyStore.clearFilter();
            //dirtyStore.filter('appointmentID',Mob2.appointmentID);    
            //check for all dirty appointments
            dirtyStore.each(function(record){
                switch(record.get('name')){ 
                    case 'RiskTask':
                    me.saveRiskTasks(Mob2.appointmentID);
                    break;
                    case 'RATools':
                    me.saveRATools(Mob2.appointmentID);
                    break;
                    case 'Activity':
                    ctlDetails.saveActivity(Mob2.appointmentID);
                    break;
                    case 'Contractor':
                    ctlDetails.saveContractor(Mob2.appointmentID);
                    break;
                }
            })
        }else{
            Ext.Msg.alert('Lightning','Mobile off-line\n please sync when in range');

        }
    }

});