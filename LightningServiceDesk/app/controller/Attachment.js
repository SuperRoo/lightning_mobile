/*
 * File: app/controller/Attachment.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Mob2.controller.Attachment', {
    extend: 'Ext.app.Controller',

    config: {
        views: [
            'frmCarousel'
        ],

        refs: {
            listAttachment: 'frmAttachment #lstAttachment',
            formAttachment: 'carousel #frmAttachment'
        },

        control: {
            "button#cmdAttachmentAdd": {
                tap: 'onCmdAttachmentAddTap'
            },
            "list#lstAttachments": {
                itemsingletap: 'onLstAttachmentsItemSingletap'
            }
        }
    },

    onCmdAttachmentAddTap: function(button, e, eOpts) {
        /*if(Ext.os.deviceType !== 'Desktop'){
            var me = this;
            console.log('taking photo');
            Ext.device.Camera.capture({
                success: me.onTakePhotoSuccess,
                failure: me.onTakePhotoFailure,
                destination: 'file',    
                source: 'camera',
                encoding: 'jpg'
            });
        }else{
            Ext.Msg.alert('Lightning','function only available on mobile device');
        }*/
        Ext.Msg.alert('Lightning','feature not available this version');
    },

    onLstAttachmentsItemSingletap: function(dataview, index, target, record, e, eOpts) {
        /*var me = this;
        if(Ext.os.deviceType === 'Desktop'){
            if(record){
                var iframe = document.createElement("iframe");
                iframe.src = Mob2.Config.getUrls().root + 'MobAttachmentDownload.aspx?fileid=' + record.get('recordID') + '&aptid=' + record.get('appointmentID') + '&id=' + Mob2.userID;
                iframe.style.display = "none";
                document.body.appendChild(iframe);
            }
        }else{
            if(record){
                window.requestFileSystem(LocalFileSystem.PERSISTENT, 0,
                function(fileSys){
                    var fileURI = fileSys.root.fullPath + '/lightning/attachments/' + record.get('fileName');
                    window.plugins.fileOpener.open(fileURI);
                },
                function(error){
                    console.log('File resolve error' + error.code);
                }
                ); 
            }

        }*/
        Ext.Msg.alert('Lightning','feature not available this version');
    },

    onTakePhotoSuccess: function(image) {
        var me = this;
        console.log('image: ' + image);
        window.resolveLocalFileSystemURI(image,me.onResolveSuccess,me.onResolveFail);

    },

    onResolveSuccess: function(fileEntry) {
        var me = this;
        me.fileEntry = fileEntry
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0,me.onFileSystemSuccess,me.onFileSystemFail)
    },

    onFileSystemSuccess: function(fs) {
        var me = this;
        fs.root.getDirectory('Lightning/Attachments/',
        {create:true, exclusive: false},
        me.onCreateDirectorySuccess,
        me.onCreateDirectoryFail);
    },

    onCreateDirectorySuccess: function(directory) {
        var me = this;
        console.log('getDirectorySuccess:' + directory.fullPath);
        me.fileUID = me.generateUUID();
        me.fileEntry.moveTo(directory, me.fileUID + '.jpg',me.OnMoveImageSuccess,me.onMoveImageFail);
    },

    OnMoveImageSuccess: function(newEntry) {
        var me = this;
        console.log('file move success:' + newEntry.fullPath );   
        Ext.Msg.alert('Lightning','file move success');

    },

    onTakePhotoFailure: function(error) {
        Ext.Msg.alert('Lightning','camera failure(' + error.code + ')');
    },

    onResolveFail: function(error) {
        Ext.Msg.alert('Lightning','image location failure(' + error.code + ')');
    },

    onFileSystemFail: function(error) {
        Ext.Msg.alert('Lightning','failure access file system(' + error.code + ')');
    },

    onCreateDirectoryFail: function(error) {
        Ext.Msg.alert('Lightning','failure creating directory(' + error.code + ')');
    },

    onMoveImageFail: function(error) {
        Ext.Msg.alert('Lightning','failure moving image(' + error.code + ')');
    },

    attachmentAdd: function(imageName, fileID) {
        var store = Ext.getStore('AttachmentsLocal');
        var idno = Mob2.app.getApplication().getController('ctlCommon').getMaxID(store);       
        var record =  Ext.create("Mob2.model.Attachment", {
            appointmentID:Mob2.appointmentID,
            recordID:idno,
            fileName: imageName,
            fileID:fileID,
            mineType:'application/jpeg',
            status:1
        });
        record.setDirty();
        store.add(record);
        console.log('Attachment Count: ' + store.getCount());
        store.sync();
        me.setDirty(Mob2.appointmentID,'Attachment',false);
        var attach = me.getListAttachmentt();
        attach.setStore(store);
        attach.refresh();

    },

    generateUUID: function() {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x7|0x8)).toString(16);
        });
        return uuid;
    }

});