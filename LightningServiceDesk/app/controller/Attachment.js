/*
 * File: app/controller/Attachment.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Mob2.controller.Attachment', {
    extend: 'Ext.app.Controller',

    config: {
        views: [
            'frmCarousel'
        ],

        refs: {
            listAttachment: 'frmAttachment #lstAttachment',
            formAttachment: 'carousel #frmAttachment'
        },

        control: {
            "button#cmdAttachmentAdd": {
                tap: 'onCmdAttachmentAddTap'
            },
            "list#lstAttachments": {
                itemsingletap: 'onLstAttachmentsItemSingletap'
            }
        }
    },

    onCmdAttachmentAddTap: function(button, e, eOpts) {
        /*if(Ext.os.deviceType !== 'Desktop'){
            var me = this;
            console.log('taking photo');
            Ext.device.Camera.capture({
                success: me.onTakePhotoSuccess,
                failure: me.onTakePhotoFailure,
                destination: 'file',    
                source: 'camera',
                encoding: 'jpg'
            });
        }else{
            Ext.Msg.alert('Lightning','function only available on mobile device');
        }*/
        Ext.Msg.alert('Lightning','feature not available this version');
    },

    onLstAttachmentsItemSingletap: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        if(Ext.os.deviceType === 'Desktop'){
            if(record){
                var iframe = document.createElement("iframe");
                iframe.src = Mob2.Config.getUrls().root + 'MobAttachmentDownload.aspx?fileid=' + record.get('recordID') + '&aptid=' + record.get('appointmentID') + '&id=' + Mob2.userID;
                iframe.style.display = "none";
                document.body.appendChild(iframe);
            }
        }else{
            if(record){
                window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, 
                    function onFileSystemSuccess(fileSystem) {  
                       var fileName = record.get('fileID') + '.' + record.get('name').split('.').pop();
                        console.log('fileURI: ' + fileSystem.root.fullPath + fileName)
                      fileSystem.root.getFile(fileName, {create: false, exclusive: false},
                        function(fileEntry){
                            console.log('file exists so open: ' + fileEntry.fullPath)
                            window.plugins.fileOpener.open(fileEntry.fullPath);
                        },
                        function(error){
                             console.log('file doesn"t exist');
                            me.downloadFile(fileSystem,record,fileName);
                            
                        });
                                       
                   }, 
                    function(error){
                        console.log('FileSystem Error');
                   });//eof filesystem           
            }//eof record

        }       
    },
    downloadFile:function(fileSystem,record,fileName){
        console.log('made it to download file');
        //"http://www.w3.org/2011/web-apps-ws/papers/Nitobi.pdf"
        fileSystem.root.getFile(
                 "dummy.html", {create: true, exclusive: false}, 
                 function gotFileEntry(fileEntry) {
                        var sPath = fileEntry.fullPath.replace("dummy.html","");
                        var fileTransfer = new FileTransfer();
                        fileEntry.remove();
                        var URI = Mob2.apiURL + 'attachment?id=' +Mob2.userID+ '&recordID='+record.get('recordID')+'&appointmentID=' + Mob2.appointmentID;
                        fileTransfer.download(
                              URI,
                              sPath + fileName,
                              function(theFile) {
                                   console.log("download complete: " + theFile.toURL());
                                   window.plugins.fileOpener.open(theFile.fullPath);
                              },
                              function(error) {
                                     console.log("download error source " + error.source);
                                     console.log("download error target " + error.target);
                                     console.log("upload error code: " + error.code);
                              }
                         );
                }, 
                function(error){
                    console.log('got FileEntry Error');
                });//eof GotFileEntry
    },
   
    
    attachmentAdd: function(imageName, fileID) {
        var store = Ext.getStore('AttachmentsLocal');
        var idno = Mob2.app.getApplication().getController('ctlCommon').getMaxID(store);       
        var record =  Ext.create("Mob2.model.Attachment", {
            appointmentID:Mob2.appointmentID,
            recordID:idno,
            fileName: imageName,
            fileID:fileID,
            mineType:'application/jpeg',
            status:1
        });
        record.setDirty();
        store.add(record);
        console.log('Attachment Count: ' + store.getCount());
        store.sync();
        me.setDirty(Mob2.appointmentID,'Attachment',false);
        var attach = me.getListAttachmentt();
        attach.setStore(store);
        attach.refresh();

    },

    generateUUID: function() {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x7|0x8)).toString(16);
        });
        return uuid;
    }

});