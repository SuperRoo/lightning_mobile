/*
 * File: app/controller/ctlFileSystem.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Mob2.controller.ctlFileSystem', {
    extend: 'Ext.app.Controller',

    config: {
    },

    attachmentDownLoad: function(record) {
        var me = this;
        var fs = null;
        var URL =  Mob2.apiURL +'attachment?id=' + Mob2.userID + '&recordID=' + record.get('recordID') + '&appointmentID=' & Mob2.appointmentID;
        //http://lightningstar1.net/MobileSvc/attachment?id=EBE704C0-23B1-4E3F-9E9B-214A8BBD3320&recordID=1&appointmentID=22;
        var file = me.localFileName(record.get('fileID'),record.get('fileName'));
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fs){   
            fs.root.getDirectory("lightning",
            {create: true, exclusive: false}, 
            function(dir){
                //lightning directory
                fs.root.getDirectory("lightning/attachments",{create: true, exclusive: false}, 
                function(dir){   
                    //attachment directory
                    //stuff goes here                           
                    fs.root.getFile(
                    "dummy.html", {create: true, exclusive: false}, 
                    function gotFileEntry(fileEntry){
                        var sPath = fileEntry.fullPath.replace("dummy.html","");
                        var fileTransfer = new FileTransfer();
                        fileEntry.remove(); 
                        fileTransfer.download(
                        URL,
                        sPath + "/lightning/attachments/" + file,
                        function(theFile) {
                            alert("download complete: " + theFile.toURI());                                           
                        },
                        function(error) {
                            var msg = "download error source " + error.source;
                            msg += "\ndownload error target " + error.target;
                            msg += "upload error code: " + error.code;
                            Ext.Msg.alert('Lightning',msg);
                        }
                        );
                    }, 
                    function(error){
                        error.message = 'Error getting file';
                        me.onError(error);
                    });

                },                   
                function(error){
                    error.message = 'Error creating directory';
                    me.onError(error);
                });
            },
            function(error){
                error.message = 'Error creating directory';
                me.onError(error);
            }
            );          


        },fileController.onError); 

    },

    attachmentDelete: function() {

    },

    attachmentOpen: function(record) {
        var me = this;
        if(Ext.os.is('Android')){     
            Ext.device.FileSystem.requestFileSystem({
                type:LocalFileSystem.PERSISTENT,
                size:1024*1024,
                success:function(filesystem){
                    debugger;
                    //var path = "file:///storage/" + fileSystem.root.name + "/lightning/attachments/";
                    var path = filesystem.fs.root.fullPath + '/lightning/attachments/' + me.attachmentFileName(record);
                    window.plugins.fileOpener.open(path);
                },
                failure: function(error){
                    console.log('error getting filesystem %o', error);    
                }
            });
        }else{
            Ext.Msg.alert('Lightning','can only perform this on a mobile device');
        }
    },

    attachmentFileName: function(record) {
        var tmp  = record.get('fileID');
        tmp += record.get('name').substring(record.get('name').indexOf('.'),record.get('name').length - record.get('name').indexOf('.'));
        return tmp;
    },

    readTextFromFile: function(fileName, onSuccess, onError) {
        var that = this;        
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, 
        function(fileSystem) {
            that._getFileEntry.call(that, fileSystem, fileName, onSuccess, onError);
        },
        function(error) {
            error.message = "Unable to request file system.";
            onError.call(that, error);
        });
    },

    deleteFile: function(fileName, onSuccess, onError) {
        var that = this;       
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, 
        function(fileSystem) {
            that._getFileEntryForDelete.call(that, fileSystem, fileName, onSuccess, onError);
        }, 
        function(error) {
            error.message = "Unable to retrieve file system.";
            onError.call(that, error);
        });
    },

    aCreateFile: function(fileSystem, fileName, text, onSuccess, onError) {
        var me = this;
        var options = {
            create: true, 
            exclusive: false
        };

        fileSystem.root.getFile(fileName, options,
        function(fileEntry) {
            me.aCreateFileWriter.call(me, fileEntry, text, onSuccess, onError);
        },
        function (error) {
            error.message = "Failed creating file.";
            onError(me, error);
        });
    },

    aCreateFileWriter: function(fileEntry, text, onSuccess, onError) {
        var that = this;
        fileEntry.createWriter(function(fileWriter) {
            var len = fileWriter.length;
            fileWriter.seek(len);
            fileWriter.write(text + '\n');
            var message = "Wrote: " + text;
            onSuccess.call(that, message);
        },
        function(error) {
            error.message = "Unable to create file writer.";
            onError.call(that, error);
        });
    },

    aGetFile: function(fileEntry, onSuccess, onError) {
        var that = this; 
        fileEntry.file(
        function(file) { 
            that._getFileReader.call(that, file, onSuccess);
        },
        function(error) {
            error.message = "Unable to get file for reading.";
            onError.call(that, error);
        });
    },

    aGetFileEntry: function(fileSystem, fileName, onSuccess, onError) {
        var that = this;
        // Get existing file, don't create a new one.
        fileSystem.root.getFile(fileName, null,
        function(fileEntry) {
            that.aGetFile(that, fileEntry, onSuccess, onError);
        }, 
        function(error) {
            error.message = "Unable to get file entry for reading.";
            onError.call(that, error);
        });

    },

    aGetFileEntryForDelete: function(fileSystem, fileName, onSuccess, onError) {
        var that = this;
        fileSystem.root.getFile(fileName, 
        null, 
        function (fileEntry) {
            that.aRemoveFile(that, fileEntry, onSuccess, onError);
        },
        function(error) {
            error.message = "Unable to find the file.";
            onError.call(that, error)
        });
    },

    aGetFileReader: function(file, onSuccess) {
        var that = this;
        var reader = new FileReader();
        reader.onloadend = function(evt) { 
            var textToWrite = evt.target.result;
            onSuccess.call(that, textToWrite);
        };        
        reader.readAsText(file);
    },

    aRemoveFile: function(fileEntry, onSuccess, onError) {
        var that = this;
        fileEntry.remove(function (entry) {
            var message = "File removed.";
            onSuccess.call(that, message);
        }, 
        function (error) {
            error.message = "Unable to remove the file.";
            onError.call(that, error)
        });
    },

    onSuccess: function(value) {
        alert('Success:' +value)
    },

    onError: function(error) {
        var me = this;
        alert('Error Code:' + me.fileErrorCode(error.code) + '\nMessage: ' + error.message);
    },

    fileErrorCode: function(code) {
        var smsg = '';
        switch(code){
            case FileError.NOT_FOUND_ERR :
            smsg = 'NOT_FOUND_ERR';
            break;
            case FileError.SECURITY_ERR :
            smsg = 'SECURITY_ERR';
            break;
            case FileError.ABORT_ERR :
            smsg = 'ABORT_ERR';
            break;
            case FileError.NOT_READABLE_ERR :
            smsg = 'NOT_READABLE_ERR';
            break;
            case FileError.ENCODING_ERR :
            smsg = 'ENCODING_ERR';
            break;
            case FileError.NO_MODIFICATION_ALLOWED_ERR :
            smsg = 'NO_MODIFICATION_ALLOWED_ERR';
            break;
            case FileError.INVALID_STATE_ERR :
            smsg = 'INVALID_STATE_ERR';
            break;
            case FileError.SYNTAX_ERR :
            smsg = 'SYNTAX_ERR';
            break;
            case FileError.INVALID_MODIFICATION_ERR :
            smsg = 'INVALID_MODIFICATION_ERR';
            break;
            case FileError.QUOTA_EXCEEDED_ERR :
            smsg = 'QUOTA_EXCEEDED_ERR';
            break;
            case FileError.TYPE_MISMATCH_ERR :
            smsg = 'TYPE_MISMATCH_ERR';
            break;
            case FileError.PATH_EXISTS_ERR :
            smsg = 'PATH_EXISTS_ERR';
            break;
            default:
            smsg = 'UNKNOWN_ERR';
            break;
        }
        return smsg;
    },

    localFileName: function(fileID, fileName) {
        var ext = filename.substr(filename.lastIndexOf('.'), filename.length - filename.lastIndexOf('.')) ;
        return fileID + ext;
    }

});