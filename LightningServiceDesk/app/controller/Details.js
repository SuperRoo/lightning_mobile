/*
 * File: app/controller/Details.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Mob2.controller.Details', {
    extend: 'Ext.app.Controller',
    alias: 'controller.Details',

    config: {
        refs: {
            ddlSelect: {
                selector: '#ddlSelect',
                xtype: 'selectfield'
            },
            cmdAppInventorySave: {
                selector: '#cmdAppInventorySave',
                xtype: 'button'
            },
            navMain: {
                selector: '#navMain',
                xtype: 'Ext.navigation.View'
            },
            activityTimeIn: '#frmCarousel #frmActivity #txtTimeIn',
            activityTimeOut: '#frmCarousel #frmActivity #txtTimeOut',
            inventoryForm: 'carousel #inventoryForm',
            carousel: '#frmCarousel',
            frmActivity: '#frmActivity',
            frmSignOff: '#frmSignOff',
            frmInventory: '#frmCarousel #frmInventory',
            listInventory: '#frmCarousel #frmInventory #conInventory #lstInventory',
            lblInventory: '#frmCarousel #frmInventory #conInventory #lblInventory',
            conDetail: '#ContractorDetail',
            conTimeStart: '#ContractorDetail #txtStart',
            conTimeEnd: '#ContractorDetail #txtEnd',
            conList: '#frmCarousel #frmContractors #lstContractors',
            frmSignOff: '#frmCarousel #frmSignOff',
            customerSignature: '#frmSignOff #txtCustomerSignature',
            customerName: '#frmSignOff #txtCustomerName',
            employeeSignature: '#frmSignOff #txtEmployeeSignature',
            frmInventoryPicker: '#inventoryPicker',
            picker: '#timePicker',
            riskList: '#RiskList',
            navRisk: '#navRisk',
            lstAppointments: '#AppointmentContainer #listAppointment',
            frmAppointments: '#AppointmentContainer'
        },

        control: {
            "textfield#txtTimeIn": {
                tap: 'onActivityStartTimeTap'
            },
            "textfield#txtTimeOut": {
                tap: 'onActivityEndTimeTap'
            },
            "button#cmdActivitySave": {
                tap: 'onActivitySaveTap'
            },
            "button#cmdInventoryAdd": {
                tap: 'onCmdInventoryAddTap'
            },
            "button#cmdInventorySave": {
                tap: 'onCmdInventorySaveTap'
            },
            "#inventoryToolbarCancel": {
                tap: 'onInventoryToolbarCancelTap'
            },
            "#inventoryToolbarDone": {
                tap: 'onInventoryToolbarDoneTap'
            },
            "button#cmdSignOffSave": {
                tap: 'onCmdSignOffSaveTap'
            },
            "carousel#frmCarousel": {
                activeitemchange: 'onFrmCarouselActiveItemChange'
            },
            "#frmCarousel #frmContractors list#lstContractors": {
                itemsingletap: 'onLstContractorsItemSingletap'
            },
            "button#cmdContractorAdd": {
                tap: 'onCmdContractorAddTap'
            },
            "button#cmdConDetSave": {
                tap: 'onCmdConDetSaveTap'
            },
            "button#cmdConDetDelete": {
                tap: 'onCmdConDetDeleteTap'
            },
            "button#cmdConDetCancel": {
                tap: 'onCmdConDetCancelTap'
            },
            "textfield#txtStart": {
                tap: 'onConStartTap'
            },
            "textfield#txtEnd": {
                tap: 'onConEndTap'
            }
        }
    },

    onActivityStartTimeTap: function(textfield) {
        var me = this;
        Mob2.pickerControl = me.getActivityTimeIn();
        me.openPicker(Mob2.pickerControl.getValue(),'Time Start');

    },

    onActivityEndTimeTap: function(textfield) {
        var me = this;
        Mob2.pickerControl = me.getActivityTimeOut();
        me.openPicker(Mob2.pickerControl.getValue(),'Time End');

    },

    onActivitySaveTap: function(button, e, eOpts) {
        var me = this;
        me.updateActivity();
        me.saveData();
    },

    onCmdInventoryAddTap: function(button, e, eOpts) {
        var me = this;
        me.updateInventory();
        var store = null;
        Ext.Viewport.setMasked({ message: 'Loading...' });
        if(me.getApplication().getController('ctlCommon').IsSysValue('SD_IsInventorySynched')){    
            me.itemGetList();
        }else{
            store = Ext.getStore('InventoryUserLocal');
            if (Ext.getStore('InventoryMainLocal').getCount() === 0){    
                me.itemGetSingle();
            }else{
                var promptBox = Ext.Msg;
                promptBox.buttonText={
                    no: 'single',			
                    yes: 'list'
                };
                promptBox.prompt('Lightning', 'Do you want to choose for a list or add single item', function(btn,text){
                    if(btn === 'no'){
                        me.itemGetSingle(); 
                    }else{
                        me.itemGetList();
                    }
                });
            }
            Ext.Viewport.setMasked(false);
        }
    },

    onCmdInventorySaveTap: function(button, e, eOpts) {
        var me = this;
        me.updateInventory();
        me.saveData();
    },

    onInventoryToolbarCancelTap: function(button, e, eOpts) {
        var me = this;
        Ext.Viewport.remove(me.getFrmInventoryPicker(),false);
        Ext.Viewport.setActiveItem(me.getNavMain());
    },

    onInventoryToolbarDoneTap: function(button, e, eOpts) {
        var me = this;
        var str = Ext.getStore('InventoryUserLocal');
        var selected;
        selected = me.getFrmInventoryPicker().child('#inventoryListMain').getSelection();  
        var x = 0;
        var rec;
        for (x=0;x<selected.length;x++){
            if (!str.findRecord('recordID',selected[x].get('recordID'))){
                selected[x].set('mode',1);        
                selected[x].set('quantity',0);
                selected[x].set('cost',0);
                selected[x].set('name',selected[x].get('itemNumber'));
                selected[x].set('appointmentID',Mob2.appointmentID);
                selected[x].set('showCost','hidden');
                //selected[x].set('recordID',Mob2.app.getApplication().getController('ctlCommon').getMaxID(str));
                str.add(selected[x]);
            }
        }
        me.writeInventory();
        Ext.Viewport.remove(me.getFrmInventoryPicker(),false);
        Ext.Viewport.setActiveItem(me.getNavMain());

    },

    onCmdSignOffSaveTap: function(button, e, eOpts) {
        var me = this;
        me.updateSignOff();
        me.saveData();

    },

    onFrmCarouselActiveItemChange: function(container, value, oldValue, eOpts) {
        if(Mob2.loading){return;}
        var sTmp = '';
        var sValid = '';
        var bCancel = false;
        var me = this;
        var switchVal = value.getItemId();
        if(oldValue.getItemId() === 'frmInventory'){    
            me.updateInventory();
        }else if (oldValue.getItemId() === 'frmActivity'){  
            me.updateActivity();
        }else if (oldValue.getItemId() === 'frmSignOff'){  
            me.updateSignOff();
        }else if(oldValue.getItemId() === 'frmDetails'){
            var record = me.getAppointmentRecord(Mob2.appointmentID);
            if (me.getApplication().getController('ctlCommon').IsSysValue('SD_RARRequired') && record.get('riskSignature') === '' ){
                //show risk
                if(me.getRiskList()){me.getRiskList().destroy();}
                var riskListView = Ext.create('Mob2.view.RiskList'); 
                if(Ext.getStore('RAToolLocal').getCount() !== 0){
                    Mob2.toolDirty = false;
                    if(typeof me.getRiskRATools() !=='undefined'){ me.getRaToolsList().destroy();}
                    viewPanel = Ext.create('Mob2.view.RiskRATools');
                    me.getApplication().getController('ctlRisk').loadRAList();
                }else{
                    viewPanel = riskListView;            
                }                
                var lst =  riskListView.down('#lstTasks');
                var storeTasks = Ext.getStore('RiskTasksLocal');
                storeTasks.clearFilter();
                storeTasks.filterBy(function(rec){
                    return rec.get('mode') !== 3 && rec.get('appointmentID') === Mob2.appointmentID;
                });
                lst.setStore(storeTasks);
                lst.refresh();
                var conStore = Ext.getStore('ContractorsLocal');
                conStore.clearFilter();
                conStore.filterBy(function(rec){
                    return rec.get('mode') !== 3 && rec.get('appointmentID') === Mob2.appointmentID;
                });
                if(!me.getNavRisk()){Ext.create('Mob2.view.navRisk');}
                me.getNavRisk().push(viewPanel); 
                //me.getNavMain().hide();        
                Ext.Viewport.add(me.getNavRisk());       
                Ext.Viewport.setActiveItem(me.getNavRisk()); 
                bCancel = true;        
            }
        }
        if (!bCancel){
            switch(switchVal){
                case 'frmDetails':
                sTmp='Details >';
                break;
                case 'frmActivity':
                sTmp='< Activity >';
                break;
                case 'frmInventory':
                sTmp='< Materials >';
                break;
                case 'frmAttachments':
                sTmp='< Attachments >';
                break;
                case 'frmContractors':
                if(me.getApplication().getController('ctlCommon').IsSysValue('SD_CompleteRequired')){
                    sTmp='< Contractors >';
                }else{
                    sTmp='< Contractors';
                }   
                break;
                case 'frmSignOff':
                sTmp='< Sign Off';
                break;
            }
            me.getNavMain().getNavigationBar().setTitle(sTmp);
        }


    },

    onLstContractorsItemSingletap: function(dataview, index, target, record, e, eOpts) {
        if(record){
            var me = this;
            if(me.getConDetail()){
                me.getConDetail().destroy();
            }
            Ext.create('Mob2.view.ContractorDetail');
            me.getConDetail().down('#titleBar').setTitle('Editing Contractor');
            me.getConDetail().down('#cmdConDetSave').setText('update');
            me.getConDetail().setRecord(record);
            //me.getNavMain().push(me.getConDetail());
            Ext.Viewport.add(me.getConDetail());
            me.getConDetail().show();
        }
    },

    onCmdContractorAddTap: function(button, e, eOpts) {
        var me = this;
        if(me.getConDetail()){
            me.getConDetail().destroy();
        }
        Ext.create('Mob2.view.ContractorDetail');
        me.getConDetail().down('#titleBar').setTitle('New Contractor');
        me.getConDetail().down('#cmdConDetDelete').hide();
        //me.getNavMain().push(me.getConDetail());
        Ext.Viewport.add(me.getConDetail());
        me.getConDetail().show();

    },

    onCmdConDetSaveTap: function(button, e, eOpts) {
        var me = this;
        me.updateContractors();
    },

    onCmdConDetDeleteTap: function(button, e, eOpts) {
        var me = this;
        var id = me.getConDetail().down('#hidID').getValue();
        var store = Ext.getStore('ContractorsLocal');
        var record = store.findRecord('id',id);
        if (record.get('mode') === 1){
            store.remove(record);
        }else{
            record.set('mode',3);
            me.setDirty(Mob2.appointmentID,'Contractor',false);   
        }
        store.sync();
        //me.getNavMain().pop(me.getConDetail());
        var lst = me.getConList();
        lst.setStore(store);
        lst.refresh();
        Ext.Viewport.remove(me.getConDetail(),true);
        //me.getNavMain().getNavigationBar().setTitle('Contractors');

    },

    onCmdConDetCancelTap: function(button, e, eOpts) {
        var me = this;
        Ext.Viewport.remove(me.getConDetail(),true);

    },

    onConStartTap: function(textfield) {
        var me = this;
        Mob2.pickerControl = me.getConTimeStart();
        me.openPicker(Mob2.pickerControl.getValue(),'Time Start');

    },

    onConEndTap: function(textfield) {
        var me = this;
        Mob2.pickerControl = me.getConTimeEnd();
        me.openPicker(Mob2.pickerControl.getValue(),'Time End');

    },

    openPicker: function(dateVal, title) {
        var me = this;
        if (!me.getPicker()){
            Ext.create('Mob2.view.timePicker', {
                useTitles : true
            });
            var slots = me.getPicker().query('pickerslot');
            var data =[];
            var textVal;
            //set hours
            var x = 0;
            for(x=1;x<=12;x++){
                textVal = (x < 10) ? ('0' + x) : x;
                data.push({text:textVal,value:x});
            }
            slots[0].getStore().setData(data);
            //set minutes
            var timeInt = parseInt(me.getApplication().getController('ctlCommon').getSysValue('TimeInterval'),10);    
            if(timeInt === 'NaN'){timeInt=1};
            data = [];
            for(x=0;x<60;x+=timeInt){
                textVal = (x < 10) ? ('0' + x) : x;
                data.push({text:textVal,value:x});
            }
            //console.log('minute slot length: ' + data.length); //60 items
            slots[1].getStore().setData(data);  

        } 

        me.getPicker().child('#pickerBar').setTitle(title);
        me.getPicker().setValue(me.convertTime(dateVal),true);
        Ext.Viewport.add(me.getPicker());
        me.getPicker().show();
    },

    convertTime: function(arg) {
        //arg must be in format of hh:mm am
        var me = this;
        if(arg === '00:00 AM'){arg = '';}
        var t = new Date();
        var retVal = {};

        if ( arg===''){
            if (t.getHours() >= 12){
                retVal.ampm = 1;
                retVal.hours =t.getHours() - 12;        
            }else{
                retVal.ampm = 0;
                retVal.hours = t.getHours();
            }
            if(retVal.hours === 0) retVal.hours = 12;
            retVal.minutes = t.getMinutes();
            retVal.minutes = me.getMinute(retVal.minutes);
            if(retVal.minutes === 60){
                retVal.minutes = 0;
                if ( retVal.hours === 12 ){
                    //12pm
                    retVal.hours = 1;           
                } else{
                    retVal.hours = retVal.hours+1;
                }        
            }
            return retVal;
        }else{
            return  me.timeToObject(arg);
        }
    },

    timeToObject: function(arg) {
        //arg must be of format 'hh:mm am' -returns array{hours:minutes:ampm}
        var resVar = {};
        arg = arg.trim();
        resVar.hours=  parseInt(arg.substr(0,2),10);
        resVar.minutes=  parseInt(arg.substr(arg.indexOf(':',0)+1,2),10);
        var tmp = arg.substr(arg.indexOf(' ',0)+1,2);
        if(tmp=='am'){
            resVar.ampm = 0;
        }else{
            resVar.ampm = 1;
        }
        return resVar;
    },

    updateInventory: function() {
        try{
            var me = this;
            //vars
            var cost,qty,mode,bDirty;
            bDirty = false;
            var removeList = [];
            var bInventorySynched  = Mob2.app.getApplication().getController('ctlCommon').IsSysValue('SD_IsInventorySynched');
            //0=unchanged 1=insert 2=update 3=delete
            var store = Ext.getStore('InventoryUserLocal');
            //var delStore = Ext.getStore('InventoryDeletedLocal');
            var valQty = [];
            var valCost = [];
            var valMode = [];
            var valID = [];
            var valDirty = [];
            store.each(function(record){
                qty = document.getElementsByName('txtQty'+record.get('recordID'))[0].value;
                valQty.push(qty);
                if (!bInventorySynched){
                    cost = document.getElementsByName('txtCost'+record.get('recordID'))[0].value;
                    valCost.push(cost);  
                }else{
                    valCost.push(0); 
                }
                valID.push(record.get('recordID'));            
                mode = record.get('mode');
                bDirty = false;
                if(parseFloat(me.checkNumber(qty)) !== (record.get('quantity')) || parseFloat(me.checkNumber(qty)) === 0 ){
                    if(parseFloat(me.checkNumber(qty)) === 0 ){
                        if(record.get('mode') === 0){
                            mode = 3;
                            bDirty = true;
                        }else{
                            store.remove(record);
                            store.sync();
                        }
                    }else{ 
                        //update record
                        bDirty = true;
                        if(record.get('mode') !== 1){
                            mode = 2;                
                        }            
                    }   
                }
                if(!bInventorySynched){       
                    if(parseFloat(me.checkNumber(cost)) !== record.get('cost')){
                        if(record.get('mode') !== 1){
                            mode = 2; 
                            bDirty = true;
                        }            
                    }        
                }
                valMode.push(mode); 
                valDirty.push(bDirty);
            });
            for (x=0;x<valQty.length;x++){
                if(valDirty[x]){
                    record = store.findRecord('recordID',valID[x]);
                    record.set({'quantity':valQty[x],
                        'cost':valCost[x],
                    'mode':valMode[x]});  
                    bDirty = true;
                }
            }
            if(bDirty){
                store.sync();
                me.setDirty(Mob2.appointmentID,'Inventory',false);
            }
            me.writeInventory();
        }catch(err){
        }
    },

    updateActivity: function() {
        var me = this;
        var record = me.getAppointmentRecord(Mob2.appointmentID);
        var vals = me.getFrmActivity().getValues();
        var bDirty = false;
        if(record.get('activityStart') !== vals.activityStart){
            record.set('activityStart',vals.activityStart);
            bDirty = true;
        }
        if(record.get('activityEnd') !== vals.activityEnd){
            record.set('activityEnd',vals.activityEnd);
            bDirty = true;
        }
        if(record.get('activityComment') !== vals.activityComment){
            record.set('activityComment',vals.activityComment);
            bDirty = true;
        }
        if(record.get('kilometres') !== parseInt(vals.kilometres)){
            record.set('kilometres',vals.kilometres);
            bDirty = true;
        }
        if(record.get('isOvernight') !== Boolean(vals.isOvernight)){
            record.set('isOvernight',vals.isOvernight);
            bDirty = true;
        }
        if(record.get('activityStatus') !== parseInt(vals.activityStatus)){
            record.set('activityStatus',vals.activityStatus);
            bDirty = true;
        }
        if(bDirty){
            record.set('mode',2);
            Ext.getStore('AppointmentsLocal').sync();
            me.setDirty(Mob2.appointmentID,'Activity',false); 
        }



    },

    updateContractors: function() {
        var me = this;
        var bDirty = false;
        var vals = me.getConDetail().getValues();
        var sValid = me.isTimeValid(vals.startTime,vals.endTime,vals.isOvernight);
        if (sValid === ''){
            if(vals.name === ''){
                sValid = 'you need a contractor name';
            }
        }
        if(sValid === ''){
            var store = Ext.getStore('ContractorsLocal');
            if (vals.id === '' ){
                vals.id  = Mob2.app.getApplication().getController('ctlCommon').getMaxID(store);
                vals.appointmentID = Mob2.appointmentID;    
                vals.mode = 1;
                store.add(vals);
                store.sync();
                bDirty=true;
            }else{
                var record = store.getById(vals.id);
                record.set('name',vals.name);
                record.set('startTime',vals.startTime);
                record.set('endTime',vals.endTime);
                record.set('isOvernight',vals.isOvernight);
                if(record.get('Mode') !== '1'){
                    record.set('mode',2);
                }
                bDirty=true;
            }
            //me.getNavMain().pop(me.getConDetail());
            var lst = me.getConList();
            lst.setStore(store);
            lst.refresh();
            //me.getNavMain().getNavigationBar().setTitle('Contractors');
            if(bDirty){
                me.setDirty(Mob2.appointmentID,'Contractor',false);   
            }
            Ext.Viewport.remove(me.getConDetail(),true);
        }else{
            Ext.Msg.alert('Lightning','Contrancotr validation error:' + sValid);
        }
    },

    updateSignOff: function() {
        var me = this;
        try{
            var frm = me.getFrmSignOff();
            var empSig = frm.down('#txtEmployeeSignature').getValue();
            var cusSig = frm.down('#txtCustomerSignature').getValue();
            var cusName = frm.down('#txtCustomerName').getValue();
            var record = me.getAppointmentRecord(Mob2.appointmentID);
            record.set('employeeSignature',empSig);
            record.set('customerSignature',cusSig);
            record.set('customerName',cusName);
            Ext.getStore('AppointmentsLocal').sync();
            me.setDirty(Mob2.appointmentID,'Activity',false);
        }catch(err){
        }
    },

    saveActivity: function(appointmentID) {
        var me = this;
        var record = me.getAppointmentRecord(appointmentID);
        var data = {};
        data.appointmentID = appointmentID;
        data.URI = Mob2.userID;
        data.activityStart = record.get('activityStart');
        data.activityEnd = record.get('activityEnd');
        data.activityComment = record.get('activityComment');
        data.isOvernight = record.get('isOvernight');
        data.kilometres = record.get('kilometres');
        data.employeeSignature = record.get('employeeSignature');
        data.customerSignature = record.get('customerSignature');
        data.customerName = record.get('customerName');
        data.status = record.get('activityStatus');
        data.riskSignature = record.get('riskSignature');
        data.riskAssessment = me.getApplication().getController('ctlCommon').getRAList(appointmentID);
        data.batch = record.get('appointmentBatch');
        console.log('saving actvity record');
        Ext.Ajax.request({
            url: Mob2.apiURL + 'activity',    
            method:'POST',
            disableCaching: false,
            jsonData: JSON.stringify(data),
            success: function(result){ 
                if(result.statusText === 'OK'){ 
                    console.log('saving successfule actvity record');
                    me.setDirty(appointmentID,'Activity',true); 
                    me.getApplication().getController('ctlCommon').clearRAList(appointmentID);
                    record.set('mode',0);
                    var batch = record.get('appointmentBatch');
                    record.set('appointmentBatch',batch+1);
                    Ext.getStore('AppointmentsLocal').sync();
                    me.saveData();
                }
            },
            failure: function(result){
                Mob2.app.getApplication().getController('ctlCommon').internetError();
            }
        });

    },

    saveInventory: function(appointmentID) {
        var me = this;
        var strInventory = Ext.getStore('InventoryUserLocal');
        var InventoryAll,aptRecord = null;
        aptRecord = me.getAppointmentRecord(appointmentID);
        var data = {};
        var itemList = [];
        data.appointmentID = appointmentID;
        data.URI = Mob2.userID;
        data.batch = aptRecord.get('inventoryBatch');
        InventoryAll = strInventory.getData().all;
        for(r=0;r<InventoryAll.length;r++){
            record = InventoryAll[r];
            if(record.get('appointmentID') === appointmentID && record.get('mode') !== 0){
                itemList.push({recordID:record.get('recordID'),quantity:record.get('quantity'),name:record.get('name'),cost:record.get('cost'),itemNumber:record.get('itemNumber'),mode:record.get('mode'),batch:aptRecord.get('inventoryBatch'),appointmentID:appointmentID}); 
            }
        }
        data.data = itemList;
       Ext.Ajax.request({
            url: Mob2.apiURL + 'inventorysave',
            disableCaching: false,    
            jsonData: JSON.stringify(data), 
            method:'POST',
            success: function(result){
                console.log('inventory save success');
                debugger;
                if(result.statusText === 'OK'){   
                    var vals = Ext.JSON.decode(result.responseText,true);
                    if(vals && vals.status === 'success'){ 
                        var itemList = [];
                        var q = [];
                        for(r=0;r< InventoryAll.length;r++){
                            record = InventoryAll[r];
                            if(record.get('appointmentID') === appointmentID){
                                q.push(record);
                            }
                        }
                        if (q.length !== 0){
                            strInventory.remove(q);
                        }
                        strInventory.sync();
                        Ext.Array.each(vals.data,function(rec){
                            obj = Ext.JSON.decode(rec,true);
                            if (obj.length !== 0){
                                for(var y = 0; y < obj.length;y++){
                                    recInventory =  Ext.create('Mob2.model.InventoryUser');
                                    recInventory.set('recordID',obj[y].recordID);
                                    recInventory.set('appointmentID',obj[y].appointmentID);
                                    recInventory.set('itemNumber',obj[y].itemNumber);
                                    recInventory.set('name',obj[y].name);
                                    recInventory.set('quantity',obj[y].quantity);
                                    recInventory.set('cost',obj[y].cost);
                                    recInventory.set('mode',obj[y].mode);
                                    recInventory.set('showCost',obj[y].showCost);
                                    strInventory.add(recInventory);
                                }
                            }               
                            var batch = aptRecord.get('inventoryBatch');
                            aptRecord.set('inventoryBatch',batch+1);
                            me.setDirty(appointmentID,'Inventory',true);
                        })  
                        strInventory.sync();
                        Ext.getStore('AppointmentsLocal').sync();
                        var recInventory = null;
                        var obj = null; 
                        me.saveData();
                    }
                }
            },
            failure: function(result){
                Mob2.app.getApplication().getController('ctlCommon').internetError();
            }
        });
    },

    saveContractor: function(appointmentID) {
        var me = this;
        var contractorAll = null;
        var store = Ext.getStore('ContractorsLocal')
        var aptRecord = me.getAppointmentRecord(appointmentID);
        var data = {};
        var contractorList = [];
        data.appointmentID = appointmentID;
        data.URI = Mob2.userID;
        data.batch = aptRecord.get('contractorBatch');
        contractorAll = store.getData().all;
        for(r=0;r<contractorAll.length;r++){
            record = contractorAll[r];
            if(record.get('appointmentID') === appointmentID && record.get('mode') !== 0){
                contractorList.push({recordID:record.get('recordID'),name:record.get('name'),startTime:record.get('startTime'),endTime:record.get('endTime'),riskSignature:record.get('riskSignature'),mode:record.get('mode'), isOvernight:record.get('isOvernight'),appointmentID:appointmentID}); 
            }
        }
        data.data = contractorList;
        Ext.Ajax.request({
            url: Mob2.apiURL + 'contractorsave',
            jsonData: JSON.stringify(data),
            disableCaching: false, 
            method:'POST',
            success: function(result){
                if(result.statusText === 'OK'){
                    console.log('contractor save success');
                    var vals = Ext.JSON.decode(result.responseText,true);
                    if(vals && vals.status === 'success'){ 
                        var itemList = [];
                        var q = [];
                        for(r=0;r< contractorAll.length;r++){
                            record = contractorAll[r];
                            if(record.get('appointmentID') === appointmentID){
                                q.push(record);
                            }
                        }
                        if (q.length !== 0){
                            store.remove(q);
                        }
                        store.sync();
                        Ext.Array.each(vals.data,function(rec){
                            obj = Ext.JSON.decode(rec,true);
                            if (obj.length !== 0){
                                for(var y = 0; y < obj.length;y++){
                                    recContractor =  Ext.create('Mob2.model.Contractor');
                                    recContractor.set('recordID',obj[y].recordID);
                                    recContractor.set('appointmentID',obj[y].appointmentID);
                                    recContractor.set('name',obj[y].name);
                                    recContractor.set('startTime',obj[y].startTime);
                                    recContractor.set('endTime',obj[y].endTime);
                                    recContractor.set('mode',obj[y].mode);
                                    recContractor.set('dateRecorded',obj[y].dateRecorded);
                                    recContractor.set('riskSignature',obj[y].riskSignature);
                                    store.add(recContractor);
                                }
                            }               
                            var batch = aptRecord.get('contractorBatch');
                            aptRecord.set('contractorBatch',batch+1);
                            me.setDirty(appointmentID,'Contractor',true);
                        });  
                        store.sync(); 
                        me.saveData();
                    }
                }

            },
            failure: function(result){
                Mob2.app.getApplication().getController('ctlCommon').internetError();
            }
        });
    },

    saveData: function() {
        //check for initial appointment
        var me = this;
        var store=null;
        var retVal = '';
        Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'saving data'
        });
        if(Mob2.isOnline){ 
            var record = me.getDirtyRecord(Mob2.appointmentID);
            if(record !== null){
                if (record.get('activityStatus') === 2 && record.get('mode') !== 0 ){
                    retVal = me.validateData();
                }
                if(retVal === ''){       
                    switch(record.get('name')){
                        case 'Inventory':
                        me.saveInventory(record.get('appointmentID'));
                        console.log('saving inventory');
                        break;
                        case 'Contractor':
                        me.saveContractor(record.get('appointmentID'));
                        console.log('saving contractor');
                        break;
                        case 'Activity':
                        me.saveActivity(record.get('appointmentID'));
                        console.log('saving activity');
                        break;
                    }
                }else{
                    Ext.Viewport.setMasked(false);
                    Ext.Msg.alert('Lightning','validation error: ' +retVal);            
                }        
            }else{
                Ext.Msg.alert('Lightning','All data saved'); 
                me.gotoAppointmentsView();
            }
        }else{
            Mob2.app.getApplication().getController('ctlCommon').internetError();
        }


    },

    getDirtyRecord: function(appointmentID) {
        var me = this;
        var dirtyStore = Ext.getStore('DirtyLocal');
        dirtyStore.clearFilter();
        var rec = dirtyStore.findRecord('appointmentID',appointmentID);
        if(rec === null){
            rec = dirtyStore.first();
            if (typeof rec === 'undefined'){
                rec = null;
            }
        }
        return rec;
    },

    gotoAppointmentsView: function() {
        var me = this;
        var rec = me.getAppointmentRecord(Mob2.appointmentID);
        if(rec.get('activityStatus') !== 1){
            me.getNavMain().pop();
        }
        me.getNavMain().setActiveItem(me.getFrmAppointments());        
        me.getLstAppointments().refresh();
        Ext.Viewport.setActiveItem(me.getNavMain());
        Ext.Viewport.setMasked(false);
    },

    isTimeValid: function(timeStart, timeEnd, isOvernight) {
        var me = this;
        var retVal = '';
        if(timeStart === ''){
            retVal='there is no start time<br/>Cannot proceed';
        }else if (timeEnd ===''){
            retVal='there is no end time<br/>Cannot proceed';
        }else{
            var start = new Array(parseInt(timeStart.substring(0,2),10),parseInt(timeStart.substring(3,5),10),timeStart.substring(6,8));
            var end = new Array(parseInt(timeEnd.substring(0,2),10),parseInt(timeEnd.substring(3,5),10),timeEnd.substring(6,8));
            if (start[2] === 'pm' && start[0] !== 12 ){start[0] += 12;}
            if (start[2] === 'am' && start[0] === 12 ){start[0] = 0;}
            if (end[2] === 'pm' && end[0] !== 12){end[0] += 12;}
            if (end[2] === 'am' && end[0] === 12){end[0] = 0;}
            if(isOvernight){
                if ((start[0] === end[0] && start[1] <= end[1]) || (start[0] < end[0])) {
                    retVal='the end time is greater than or equal to the start time<br/>Cannot proceed';
                }
            }else{
                if(start[2]==='am' && timeEnd === '12:00 am'){
                    retVal='you have an end time of 12:00 am where it shoudl be 12:00 pm';
                }else if ((start[0] === end[0] && start[1] >= end[1]) || (start[0] > end[0])) {
                    retVal='the end time is greater than or equal to the start time<br/>Cannot proceed';
                }
            }
        }
        return retVal;
    },

    isSignOffValid: function(empSig, cusSig, cusName) {
        var me = this;
        var retVal = '';
        if(empSig ===''){
            retVal = 'no employee signature';
        }else if(cusSig === ''){
            retVal = 'no customer signature';
        }else if(cusName === ''){
            retVal = 'no customer name';
        }
        return retVal;
    },

    checkNumber: function(value) {
        if(isNaN(value) || value == '0' || value ==='' ){
            return 0;
        }else{
            return value;
        }
    },

    setDirty: function(appointmentID, name, clear) {
        var me = this;
        var bSave = true;
        var store = Ext.getStore('DirtyLocal');
        var record =  store.findRecord('appointmentID',appointmentID);
        if(record){   
            if(record.get('name') === name && clear){        
                store.remove(record);
                store.sync();
                bSave = false;
            }else if(record.get('name') === name && !clear){
                bSave = false;
            }   
        }
        if(bSave){
            var newRecord = Ext.create('Mob2.model.Dirty');
            newRecord.set('appointmentID',appointmentID);
            newRecord.set('name',name);
            store.add(newRecord);   
        }

    },

    getDirty: function(appointmentID, name) {
        var me = this;
        var bExists = false;
        var store = Ext.getStore('DirtyLocal');
        var record =  store.findRecord('appointmentID',appointmentID);
        if(record){
            if(record.get('name') === name){
                bExists = true
            }
        }
        return bExists;
    },

    getAppointmentRecord: function(appointmentID) {
        var me = this;
        var aptRecord,appointmentALL;
        var strAppointment =  Ext.getStore('AppointmentsLocal');
        appointmentALL = strAppointment.getData().all;
        for(r=0;r<appointmentALL.length;r++){
            record = appointmentALL[r];
            if(record.get('appointmentID') === appointmentID){
                aptRecord = record;
                break;
            }
        }
        return aptRecord
    },

    getMinute: function(val) {
        var me = this;
        var timeInt = parseInt(me.getApplication().getController('ctlCommon').getSysValue('TimeInterval'),10);    
        if(timeInt === 'NaN'){timeInt=1};
        if (timeInt === 1){
            return val;
        }
        var arr = [];
        var counter = 0;
        while(counter < 60){
            arr.push(counter);
            counter += timeInt;
        }
        var x = 0;
        var retVal = 0;
        for(;x<arr.length;x++){
            if(arr[x] > val){
                retVal = arr[x]
            break;}     
        }
        if(x == 0){
            if(val >arr[0] + timeInt/2 ){
                val = arr[1];
            }
        }else if(retVal === 0 && x === arr.length){
            retVal = 60;
        }else{
            if (val < (arr[x-1] + timeInt/2 )){
                retVal = arr[x-1];
            }else if(val > arr[x]){
                retVal = 60;
            }
        }
        return retVal

    },

    validateData: function() {
        var me = this;
        var retVal  = '';
        var record = me.getAppointmentRecord(Mob2.appointmentID);
        //validate activity times
        retVal = me.isTimeValid(record.get('activityStart'),record.get('activityEnd'),record.get('isOvernight'));
        //validate signOff
        if (retVal === ''){
            if( Mob2.app.getApplication().getController('ctlCommon').IsSysValue('SD_CompleteRequired')){
                if(record.get('employeeSignature') === ''){
                    retVal = 'a worker signature is required to sign off this appointment';
                }else if(record.get('customerSignature') === ''){
                    retVal = 'a customer signature is required to sign off this appointment'
                }else if(record.get('customerName') === ''){
                    retVal = 'a customer name is required to sign off this appointment'
                }
            }
        }
        if (retVal === ''){
            //validate contractors times
            var store = Ext.getStore('ContractorsLocal');
            if(store.getCount() !==0){
                store.each(function(rec){
                    retval = me.isTimeValid(rec.get('startTime'),rec.get('endTime'),rec.get('isOvernight'));  
                    if(retVal !== ''){
                        return false;
                    }
                });
            }
        }
        return retVal;
    },

    writeInventory: function() {
        var store = Ext.getStore('InventoryUserLocal');
        store.sync();
        var me = this;
        var tpl = '';
        var records = null;
        if(Mob2.app.getApplication().getController('ctlCommon').IsSysValue('SD_IsInventorySynched')){
            tpl = '<table border="0" cellpadding="0" cellspacing="0" width="100%"> <tr  style="height:30px"><td align="left" width="65%" ><span style="margin-left:10px">Name</span></td><td align="left" width="25%" >Qty</td><td align="left" width="10%">&nbsp;</td></tr>';
            if(store.getCount() !== 0){
                store.each(function(record){
                    tpl += '<tr style="height:40px;background-color:White;" valign="middle"><td align="left" width="65%"><span style="margin-left:10px">' + record.get('name') + '</span></td><td align="left" width="25%"><input type="number" value="' + record.get('quantity') + '" style="width:50px;" name="txtQty' + record.get('recordID') + '" /></td><td align="left" width="10%">&nbsp;</td></tr>';
                });

            }
        }else{
            tpl = '<table border="0" cellpadding="0" cellspacing="0" width="100%"> <tr style="height:30px"><td align="left" width="50%"><span style="margin-left:10px">Name</span></td><td align="left" width="25%" >Qty</td><td align="left" width="25%" >Cost</td></tr>';
            if(store.getCount() !== 0){
                store.each(function(record){
                    tpl += '<tr style="height:40px;background-color:White;" valign="middle"><td align="left" width="50%" ><span style="margin-left:10px">' + record.get('name') + '</span></td><td align="left" width="25%"><input type="number" value="' + record.get('quantity') + '" style="width:75px;" name="txtQty' + record.get('recordID') + '" /></td><td align="left" width="25%"><input type="number" style="width:100px;" value="' + record.get('cost') + '" name="txtCost' + record.get('recordID') + '" /></td></tr>';
                });
            }

        }
        tpl += '</table>';
        me.getFrmInventory().setHtml(tpl);

    },

    itemGetSingle: function() {

        var me = this;
        Ext.Msg.prompt('Lightning', 'Please enter item name:', function(btn,text) {    
            if(btn === 'ok'){
                if(text !== ''){
                    var store = Ext.getStore('InventoryUserLocal');
                    var idno = Mob2.app.getApplication().getController('ctlCommon').getMaxID(store);       
                    var record =  Ext.create("Mob2.model.InventoryUser", {
                        recordID:idno,
                        name: text,
                        quantity: 0,
                        cost: 0,
                        appointmentID:Mob2.appointmentID,
                        showCost:'visible',
                        itemNumber:'',
                        mode:1

                    });
                    record.setDirty();
                    store.add(record);
                    console.log('UserInventory Count: ' + store.getCount());
                    store.sync();
                    me.writeInventory();
                }else{
                    Ext.Msg.alert('Lightning','you have to enter a name');
                }           
            }       
        });
    },

    itemGetList: function() {
        if (!me.getFrmInventoryPicker()){
            console.log(' New Inventory');
            Ext.create('Mob2.view.inventoryPicker'); 
            // set inventory store
            var store = Ext.getStore('InventoryMainLocal');
            var lst = me.getFrmInventoryPicker().child('#inventoryListMain');    
            lst.setStore(store);
            lst.refresh();    	
        }
        me.getFrmInventoryPicker().child('#inventoryListMain').deselectAll();
        Ext.Viewport.add(me.getFrmInventoryPicker());
        Ext.Viewport.setActiveItem(me.getFrmInventoryPicker());
    }

});